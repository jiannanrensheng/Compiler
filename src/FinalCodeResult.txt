.386
.model flat,stdcall
option casemap:none
include windows.inc
include masm32.inc
include kernel32.inc
includelib masm32.lib
includelib kernel32.lib
.data
	a	DWORD	0
	T0	DWORD	0
	b	DWORD	0
	T1	DWORD	0
	i	DWORD	0
	T2	DWORD	0
	sum	DWORD	0
	T3	DWORD	0
	s	SBYTE	0
	T4	SBYTE	0
	T5	DWORD	0
	T6	DWORD	0
	T7	DWORD	0
	T8	DWORD	0
	T9	BYTE	1
	T10	DWORD	0
	T11	DWORD	0
	T12	DWORD	0
	T13	DWORD	0
	T14	DWORD	0
	T15	DWORD	0
	T16	DWORD	0
	T17	BYTE	1
	T18	DWORD	0
	T19	DWORD	0
	T20	DWORD	0
	T21	DWORD	0
	T22	DWORD	0
	T23	DWORD	0
	T24	DWORD	0
	T25	DWORD	0
	T26	DWORD	0
	T27	DWORD	0
	T28	DWORD	0
	T29	BYTE	1
	T30	DWORD	0
	T31	BYTE	1
	T32	DWORD	0
	T33	BYTE	1
	T34	DWORD	0
	T35	DWORD	0
	T36	DWORD	0
	T37	BYTE	1
	T38	BYTE	1
	T39	DWORD	0
.code
main PROC
	MOV	EAX , 1
	MOV	T0 , EAX
	MOV	EBX , T0
	MOV	a , EBX
	MOV	EAX , 2
	MOV	T1 , EAX
	MOV	EBX , T1
	MOV	b , EBX
	MOV	EAX , 0
	MOV	T2 , EAX
	MOV	EBX , T2
	MOV	i , EBX
	MOV	EAX , 0
	MOV	T3 , EAX
	MOV	EBX , T3
	MOV	sum , EBX
	MOV	AL , 's'
	MOV	T4 , AL
	MOV	AL , T4
	MOV	s , AL
	MOV	EAX , 2
	MOV	T5 , EAX
	MOV	EAX , 3
	MOV	T6 , EAX
	MOV	EAX , T5
	ADD	EAX , T6
	MOV	T7 , EAX
	MOV	EDX , 0
	MOV	EAX , b
	MOV	ECX , T7
	DIV	ECX
	MOV	T8 , EAX
	MOV	EBX , T8
	MOV	b , EBX
	MOV	EAX , a
	MOV	EBX , b
	.IF EAX >= EBX
		MOV	T9 , 1
	.ELSE
		MOV	T9 , 0
	.ENDIF
	MOV	AL , T9
	CMP	AL , 1
	JNZ	L25
	MOV	EAX , 4
	MOV	T10 , EAX
	MOV	EAX , 2
	MOV	T11 , EAX
	MOV	EAX , b
	ADD	EAX , T11
	MOV	T12 , EAX
	MOV	EAX , 3
	MOV	T13 , EAX
	MOV	EAX , T12
	MUL	T13
	MOV	T14 , EAX
	MOV	EAX , T10
	ADD	EAX , T14
	MOV	T15 , EAX
	MOV	EBX , T15
	MOV	a , EBX
	JMP	L32
L25:
	MOV	EAX , 2
	MOV	T16 , EAX
	MOV	EAX , a
	MOV	EBX , T16
	.IF EAX == EBX
		MOV	T17 , 1
	.ELSE
		MOV	T17 , 0
	.ENDIF
	MOV	AL , T17
	CMP	AL , 1
	JNZ	L31
	MOV	EAX , 2
	MOV	T18 , EAX
	MOV	EBX , T18
	MOV	a , EBX
	JMP	L32
L31:
	MOV	EAX , i
	ADD	EAX , 1
	MOV	T19 , EAX
L32:
	MOV	EBX , T19
	MOV	i , EBX
	MOV	EAX , b
	ADD	EAX , 1
	MOV	T20 , EAX
	MOV	EBX , T20
	MOV	b , EBX
	MOV	EBX , a
	MOV	b , EBX
	MOV	EAX , 2
	MOV	T21 , EAX
	MOV	EBX , T21
	MOV	i , EBX
	MOV	EAX , 2
	MOV	T22 , EAX
	MOV	EAX , 3
	MOV	T23 , EAX
	MOV	EAX , 2
	MOV	T24 , EAX
	MOV	EAX , T23
	MUL	T24
	MOV	T25 , EAX
	MOV	EAX , T22
	SUB	EAX , T25
	MOV	T26 , EAX
	MOV	EBX , T26
	MOV	i , EBX
	MOV	EAX , 0
	MOV	T27 , EAX
	MOV	EBX , T27
	MOV	i , EBX
L46:
	MOV	EAX , 10
	MOV	T28 , EAX
	MOV	EAX , i
	MOV	EBX , T28
	.IF EAX <= EBX
		MOV	T29 , 1
	.ELSE
		MOV	T29 , 0
	.ENDIF
	MOV	AL , T29
	CMP	AL , 1
	JNZ	L67
	MOV	EAX , 3
	MOV	T30 , EAX
	MOV	EAX , i
	MOV	EBX , T30
	.IF EAX == EBX
		MOV	T31 , 1
	.ELSE
		MOV	T31 , 0
	.ENDIF
	MOV	AL , T31
	CMP	AL , 1
	JNZ	L54
	INVOKE StdOut, addr i
	JMP	L63
L54:
	MOV	EAX , 6
	MOV	T32 , EAX
	MOV	EAX , i
	MOV	EBX , T32
	.IF EAX == EBX
		MOV	T33 , 1
	.ELSE
		MOV	T33 , 0
	.ENDIF
	MOV	EAX , 2
	MOV	T34 , EAX
	MOV	EAX , a
	ADD	EAX , T34
	MOV	T35 , EAX
	MOV	EAX , 4
	MOV	T36 , EAX
	MOV	EAX , T35
	MOV	EBX , T36
	.IF EAX == EBX
		MOV	T37 , 1
	.ELSE
		MOV	T37 , 0
	.ENDIF
	.IF T33&&T37
		MOV	T38 , 1
	.ELSE
		MOV	T38 , 0
	.ENDIF
	MOV	AL , T38
	CMP	AL , 1
	JNZ	L63
	INVOKE StdIn, addr a, sizeof a
L63:
	JMP	L63
	MOV	EAX , i
	ADD	EAX , 1
	MOV	T39 , EAX
	MOV	EBX , T39
	MOV	i , EBX
	JMP	L46
L67:
main ENDP
INVOKE ExitProcess,0
END main
